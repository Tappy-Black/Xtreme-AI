import moment from 'moment-timezone';
import fs from 'fs';
import os from 'os';
import pkg from '@whiskeysockets/baileys';
const { generateWAMessageFromContent, proto } = pkg;
import config from '../config.cjs';
import axios from 'axios';

// Get total memory and free memory in bytes
const totalMemoryBytes = os.totalmem();
const freeMemoryBytes = os.freemem();

// Define unit conversions
const byteToKB = 1 / 1024;
const byteToMB = byteToKB / 1024;
const byteToGB = byteToMB / 1024;

// Function to format bytes to a human-readable format
function formatBytes(bytes) {
  if (bytes >= Math.pow(1024, 3)) {
    return (bytes * byteToGB).toFixed(2) + ' GB';
  } else if (bytes >= Math.pow(1024, 2)) {
    return (bytes * byteToMB).toFixed(2) + ' MB';
  } else if (bytes >= 1024) {
    return (bytes * byteToKB).toFixed(2) + ' KB';
  } else {
    return bytes.toFixed(2) + ' bytes';
  }
}

// Bot Process Time
const uptime = process.uptime();
const day = Math.floor(uptime / (24 * 3600)); // Calculate days
const hours = Math.floor((uptime % (24 * 3600)) / 3600); // Calculate hours
const minutes = Math.floor((uptime % 3600) / 60); // Calculate minutes
const seconds = Math.floor(uptime % 60); // Calculate seconds

// Uptime
const uptimeMessage = `*I am alive now since ${day}d ${hours}h ${minutes}m ${seconds}s*`;
const runMessage = `*‚òÄÔ∏è ${day} Day*\n*üïê ${hours} Hour*\n*‚è∞ ${minutes} Minutes*\n*‚è±Ô∏è ${seconds} Seconds*\n`;

const xtime = moment.tz("Africa/Nairobi").format("HH:mm:ss");
const xdate = moment.tz("Africa/Nairobi").format("DD/MM/YYYY");
const time2 = moment().tz("Africa/Nairobi").format("HH:mm:ss");
let pushwish = "";

if (time2 < "05:00:00") {
  pushwish = `Good Morning üåÑ`;
} else if (time2 < "11:00:00") {
  pushwish = `Good Morning üåÑ`;
} else if (time2 < "15:00:00") {
  pushwish = `Good Afternoon üåÖ`;
} else if (time2 < "18:00:00") {
  pushwish = `Good Evening üåÉ`;
} else if (time2 < "19:00:00") {
  pushwish = `Good Evening üåÉ`;
} else {
  pushwish = `Good Night üåå`;
}

const menu = async (m, Matrix) => {
  const prefix = config.PREFIX;
  const cmd = m.body.startsWith(prefix) ? m.body.slice(prefix.length).split(' ')[0].toLowerCase() : '';
  const mode = config.MODE === 'public' ? 'public' : 'private';
  const pref = config.PREFIX;

  const validCommands = ['fullmenu', 'menu', 'listcmd'];

  if (validCommands.includes(cmd)) {
    const str = `
‚ï≠‚îÄ‚îÄ‚≠òüíà *${config.BOT_NAME}* üíà‚îÄ¬∑‚≠ò
‚îÜ ‚ó¶ 
‚îÜ ‚ó¶ ‚Ä¢ üëë Owner : *${config.OWNER_NAME}*
‚îÜ ‚ó¶ ‚Ä¢ üé≤ User : *${m.pushName}*
‚îÜ ‚ó¶ ‚Ä¢ ü§ñ Baileys : *Multi Device*
‚îÜ ‚ó¶ ‚Ä¢ üíª Type : *NodeJs*
‚îÜ ‚ó¶ ‚Ä¢ ‚öôÔ∏è Mode : *${mode}*
‚îÜ ‚ó¶ ‚Ä¢ üåê Platform : *${os.platform()}*
‚îÜ ‚ó¶ ‚Ä¢ ‚ôã Prefix : [${prefix}]
‚îÜ ‚ó¶ ‚Ä¢ üè∑Ô∏è Version : *4.0.0 B·¥á·¥õ·¥Ä*
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑

> ${pushwish} *${m.pushName}*!

‚ï≠‚îÄ‚îÄ¬∑‡πè[üì• *·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ·¥ç·¥á…¥·¥ú*üì•]
‚îÜ ‚ó¶ 
‚îÜ ‚ó¶  üü¶ facebook
‚îÜ ‚ó¶  üìÅ mediafire
‚îÜ ‚ó¶  üéµ tiktok
‚îÜ ‚ó¶  üì∑ insta
‚îÜ ‚ó¶  üì¶ apk
‚îÜ ‚ó¶  üñºÔ∏è img
‚îÜ ‚ó¶  ‚ñ∂Ô∏è tt2
‚îÜ ‚ó¶  üìå pins
‚îÜ ‚ó¶  üîµ fb2
‚îÜ ‚ó¶  üìç pinterest
‚îÜ ‚ó¶  üé∂ spotify
‚îÜ ‚ó¶  üéß play
‚îÜ ‚ó¶  üéß song
‚îÜ ‚ó¶  üîâ audio
‚îÜ ‚ó¶  üé¨ video
‚îÜ ‚ó¶  üéµ ytmp3
‚îÜ ‚ó¶  üìπ ytmp4
‚îÜ ‚ó¶  üé∂ song
‚îÜ ‚ó¶  ‚òÅÔ∏è gdrive
‚îÜ ‚ó¶  üåê ssweb
‚îÜ ‚ó¶  üéµ tiks
‚îÜ ‚ó¶ 
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑

‚ï≠‚îÄ‚îÄ¬∑‡πè[üîÑ *·¥Ñ·¥è…¥·¥†·¥á Ä·¥õ ·¥ç·¥á…¥·¥ú* üîÑ]
‚îÜ ‚ó¶ 
‚îÜ ‚ó¶  üè∑Ô∏è sticker
‚îÜ ‚ó¶  üè∑Ô∏è attp
‚îÜ ‚ó¶  üòÄ emojimix
‚îÜ ‚ó¶  ‚ú® fancy
‚îÜ ‚ó¶  üñºÔ∏è take
‚îÜ ‚ó¶  üéµ mp3
‚îÜ ‚ó¶  üó£Ô∏è tts
‚îÜ ‚ó¶  üåê trt
‚îÜ ‚ó¶  üî¢ base64
‚îÜ ‚ó¶  010 ebinary
‚îÜ ‚ó¶  üî§ dbinary
‚îÜ ‚ó¶  üîó tinyurl
‚îÜ ‚ó¶  üåê url
‚îÜ ‚ó¶  üîÅ repeat
‚îÜ ‚ó¶  ‚ùì ask
‚îÜ ‚ó¶  üìñ readmore
‚îÜ ‚ó¶  üíö help
‚îÜ ‚ó¶  üíö support
‚îÜ ‚ó¶ 
‚ï∞‚îÄ‚îà‚ä∑

‚ï≠‚îÄ‚îÄ¬∑‡πè[ü§ñ *·¥Ä…™ ·¥ç·¥á…¥·¥ú*ü§ñ]
‚îÜ ‚ó¶ 
‚îÜ ‚ó¶  üß† ai
‚îÜ ‚ó¶  ü§ñ gpt
‚îÜ ‚ó¶  üß¨ black
‚îÜ ‚ó¶  üì¶ blackbox
‚îÜ ‚ó¶  üëë bug
‚îÜ ‚ó¶  ü§µ report 
‚îÜ ‚ó¶  üîç bing
‚îÜ ‚ó¶  üé® dalle
‚îÜ ‚ó¶  üñºÔ∏è remini
‚îÜ ‚ó¶  ü§ñ gemini
‚îÜ ‚ó¶ 
‚ï∞‚îÄ‚îà‚ä∑

‚ï≠‚îÄ‚îÄ¬∑‡πè[üßä *·¥õ·¥è·¥è üÍú± ·¥ç·¥á…¥·¥ú* üßä]
‚îÜ ‚ó¶ 
‚îÜ ‚ó¶  üßÆ calculator
‚îÜ ‚ó¶  ‚úâÔ∏è tempmail
‚îÜ ‚ó¶  üó≥Ô∏è checkmail
‚îÜ ‚ó¶  üîä trt
‚îÜ ‚ó¶  üòÅ tts
‚îÜ ‚ó¶ 
‚ï∞‚îÄ‚îà‚ä∑

‚ï≠‚îÄ‚îÄ¬∑‡πè[üë• *…¢ Ä·¥è·¥ú·¥ò ·¥ç·¥á…¥·¥ú* üë•]
‚îÜ ‚ó¶ 
‚îÜ ‚ó¶  üîó grouplink
‚îÜ ‚ó¶  üö™ kickall
‚îÜ ‚ó¶  üö´ kickall
‚îÜ ‚ó¶  ‚ûï add
‚îÜ ‚ó¶  ‚ûñ remove
‚îÜ ‚ó¶  üë¢ kick
‚îÜ ‚ó¶  ‚¨ÜÔ∏è promote
‚îÜ ‚ó¶  ‚¨áÔ∏è demote
‚îÜ ‚ó¶  üëã goodbye
‚îÜ ‚ó¶  üéâ welcome
‚îÜ ‚ó¶  üóëÔ∏è delete
‚îÜ ‚ó¶  üñºÔ∏è getpic
‚îÜ ‚ó¶  ‚ÑπÔ∏è groupinfo
‚îÜ ‚ó¶  ‚è≥ setppgc
‚îÜ ‚ó¶  ‚è≥ setname
‚îÜ ‚ó¶  ‚è≥ setdesc
‚îÜ ‚ó¶  üìù allreq
‚îÜ ‚ó¶  ‚úèÔ∏è updategname
‚îÜ ‚ó¶  üìù updategdesc
‚îÜ ‚ó¶  üì© joinrequests
‚îÜ ‚ó¶  üì® getbio
‚îÜ ‚ó¶  üèÉ nikal
‚îÜ ‚ó¶  üîá mute
‚îÜ ‚ó¶  üîä unmute
‚îÜ ‚ó¶  üîí lockgc
‚îÜ ‚ó¶  üîì unlockgc
‚îÜ ‚ó¶  üì© invite
‚îÜ ‚ó¶  #Ô∏è‚É£ tag
‚îÜ ‚ó¶  üè∑Ô∏è hidetag
‚îÜ ‚ó¶  @Ô∏è‚É£ tagall
‚îÜ ‚ó¶  üëî tagadmins
‚ï∞‚îÄ‚îÄ‚îÄ‚îà‚ä∑

‚ï≠‚îÄ‚îÄ¬∑‡πè[üîé *Íú±·¥á·¥Ä Ä·¥Ñ ú ·¥ç·¥á…¥·¥ú* üîé]
‚îÜ ‚ó¶ 
‚îÜ ‚ó¶  üéß play
‚îÜ ‚ó¶  üéµ yts
‚îÜ ‚ó¶  üóíÔ∏è movie
‚îÜ ‚ó¶  üîé google
‚îÜ ‚ó¶  üñºÔ∏è gimage
‚îÜ ‚ó¶  üîó pinterest
‚îÜ ‚ó¶  üìú wallpaper
‚îÜ ‚ó¶  üìí wikimedia
‚îÜ ‚ó¶  üîç ytsearch
‚îÜ ‚ó¶  üîî ringtone
‚îÜ ‚ó¶  üé∂ lyrics
‚îÜ ‚ó¶ 
‚ï∞‚îÄ‚îà‚ä∑

‚ï≠‚îÄ‚îÄ¬∑‡πè[‚ö°*·¥ç·¥Ä…™…¥ ·¥ç·¥á…¥·¥ú* ‚ö°]
‚îÜ ‚ó¶ 
‚îÜ ‚ó¶  üèì ping
‚îÜ ‚ó¶  üöÄ speed
‚îÜ ‚ó¶  üì° infobot
‚îÜ ‚ó¶  üíö alive
‚îÜ ‚ó¶  ‚è±Ô∏è runtime
‚îÜ ‚ó¶  ‚è≥ uptime
‚îÜ ‚ó¶  üì¶ repo
‚îÜ ‚ó¶  üëë owner
‚îÜ ‚ó¶  üìú menu
‚îÜ ‚ó¶  üìú menu2
‚îÜ ‚ó¶  üîÑ restart
‚îÜ ‚ó¶ 
‚ï∞‚îÄ‚îà‚ä∑

‚ï≠‚îÄ‚îÄ¬∑‡πè[üëë *·¥è·¥°…¥·¥á Ä ·¥ç·¥á…¥·¥ú* üëë]
‚îÜ ‚ó¶ 
‚îÜ ‚ó¶  üëë owner
‚îÜ ‚ó¶  üìú autotyping 
‚îÜ ‚ó¶  üìú autorecording 
‚îÜ ‚ó¶  üìä autoread
‚îÜ ‚ó¶  üìã alwaysonline 
‚îÜ ‚ó¶  üìö anticall
‚îÜ ‚ó¶  üì¶ repo
‚îÜ ‚ó¶  üö´ block
‚îÜ ‚ó¶  ‚úÖ unblock
‚îÜ ‚ó¶  üñºÔ∏è fullpp
‚îÜ ‚ó¶  üñºÔ∏è setpp
‚îÜ ‚ó¶  üîÑ restart
‚îÜ ‚ó¶  ‚èπÔ∏è autosview
‚îÜ ‚ó¶  üîÑ update
‚îÜ ‚ó¶  üíö setstatus
‚îÜ ‚ó¶  ‚ôªÔ∏è listcmd
‚îÜ ‚ó¶  üèì setnamebot
‚îÜ ‚ó¶  üÜî quran
‚îÜ ‚ó¶  üÜî jid
‚îÜ ‚ó¶  üìñ bible
‚îÜ ‚ó¶  üìñ biblelist /blist
‚îÜ ‚ó¶ 
‚ï∞‚îÄ‚îà‚ä∑

‚ï≠‚îÄ‚îÄ¬∑‡πè[üí´ *Íú±·¥õ·¥Ä ü·¥ã ·¥ç·¥á…¥·¥ú* üí´ ]
‚îÜ ‚ó¶ 
‚îÜ ‚ó¶  üìû truecaller
‚îÜ ‚ó¶  üì∏ instastalk
‚îÜ ‚ó¶  üî• githubstalk
‚îÜ ‚ó¶ 
‚ï∞‚îÄ‚îà‚ä∑
> *${config.DESCRIPTION}*`;

    // Check if MENU_IMAGE exists in config and is not empty
    let menuImage;
    if (config.MENU_IMAGE && config.MENU_IMAGE.trim() !== '') {
      try {
        // Try to fetch the image from URL
        const response = await axios.get(config.MENU_IMAGE, { responseType: 'arraybuffer' });
        menuImage = Buffer.from(response.data, 'binary');
      } catch (error) {
        console.error('Error fetching menu image from URL, falling back to local image:', error);
        menuImage = fs.readFileSync('./media/tappy.jpg');
      }
    } else {
      // Use local image if MENU_IMAGE is not configured
      menuImage = fs.readFileSync('./media/tappy.jpg');
    }

    await Matrix.sendMessage(m.from, {
      image: menuImage,
      caption: str,
      contextInfo: {
        mentionedJid: [m.sender],
        forwardingScore: 999,
        isForwarded: true,
        forwardedNewsletterMessageInfo: {
          newsletterJid: '120363369453603973@newsletter',
          newsletterName: "ùïè‘µ¬Æem¬£~‘µùñäùñàùñç_ùïè",
          serverMessageId: 143
        }
      }
    }, {
      quoted: m
    });

    // Send audio after sending the menu
    await Matrix.sendMessage(m.from, {
      audio: { url: 'https://files.catbox.moe/ddmjyy.mp3' },
      mimetype: 'audio/mp4',
      ptt: true
    }, { quoted: m });
  }
};

export default menu;
